{"ast":null,"code":"import React,{useState,useEffect}from'react';import{app,pages}from'@microsoft/teams-js';import ChatInterface from'./components/ChatInterface';import Header from'./components/Header';import StatusPanel from'./components/StatusPanel';import'./App.css';import'./components/styles.css';import'./teams.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[apiStatus,setApiStatus]=useState('checking');const[availablePdfs,setAvailablePdfs]=useState([]);const[selectedPdf,setSelectedPdf]=useState('harness_gear');const[ocrMethod,setOcrMethod]=useState('pymupdf');const[teamsInitialized,setTeamsInitialized]=useState(false);const[teamsContext,setTeamsContext]=useState(null);// Initialize Teams SDK\nuseEffect(()=>{const initializeTeams=async()=>{try{await app.initialize();// Get Teams context\nconst context=await app.getContext();setTeamsContext(context);setTeamsInitialized(true);// Notify Teams that the app has loaded successfully\napp.notifySuccess();console.log('Teams context:',context);}catch(error){console.error('Failed to initialize Teams SDK:',error);// Still allow the app to work outside Teams\nsetTeamsInitialized(true);}};initializeTeams();},[]);// Check API status on component mount\nuseEffect(()=>{if(teamsInitialized){checkApiStatus();}},[teamsInitialized]);const checkApiStatus=async()=>{try{// In Teams, we might need to use a different API endpoint\nconst apiUrl=process.env.REACT_APP_API_URL||'/health';const response=await fetch(apiUrl);if(response.ok){const data=await response.json();setApiStatus('connected');setAvailablePdfs(data.available_pdfs||[]);}else{setApiStatus('error');}}catch(error){console.error('API health check failed:',error);setApiStatus('error');}};// Show loading state while Teams is initializing\nif(!teamsInitialized){return/*#__PURE__*/_jsx(\"div\",{className:\"teams-loading\",children:/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\",children:\"Initializing Teams App...\"})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"App teams-app\",children:[/*#__PURE__*/_jsx(Header,{apiStatus:apiStatus,onRefresh:checkApiStatus,teamsContext:teamsContext}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(StatusPanel,{apiStatus:apiStatus,availablePdfs:availablePdfs,selectedPdf:selectedPdf,ocrMethod:ocrMethod,onPdfChange:setSelectedPdf,onOcrMethodChange:setOcrMethod,onRefresh:checkApiStatus}),/*#__PURE__*/_jsx(ChatInterface,{selectedPdf:selectedPdf,ocrMethod:ocrMethod,apiStatus:apiStatus,teamsContext:teamsContext})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","app","pages","ChatInterface","Header","StatusPanel","jsx","_jsx","jsxs","_jsxs","App","apiStatus","setApiStatus","availablePdfs","setAvailablePdfs","selectedPdf","setSelectedPdf","ocrMethod","setOcrMethod","teamsInitialized","setTeamsInitialized","teamsContext","setTeamsContext","initializeTeams","initialize","context","getContext","notifySuccess","console","log","error","checkApiStatus","apiUrl","process","env","REACT_APP_API_URL","response","fetch","ok","data","json","available_pdfs","className","children","onRefresh","onPdfChange","onOcrMethodChange"],"sources":["D:/KattSafe/pdf-qa-frontend/src/App-teams.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { app, pages } from '@microsoft/teams-js';\r\nimport ChatInterface from './components/ChatInterface';\r\nimport Header from './components/Header';\r\nimport StatusPanel from './components/StatusPanel';\r\nimport './App.css';\r\nimport './components/styles.css';\r\nimport './teams.css';\r\n\r\nfunction App() {\r\n  const [apiStatus, setApiStatus] = useState('checking');\r\n  const [availablePdfs, setAvailablePdfs] = useState([]);\r\n  const [selectedPdf, setSelectedPdf] = useState('harness_gear');\r\n  const [ocrMethod, setOcrMethod] = useState('pymupdf');\r\n  const [teamsInitialized, setTeamsInitialized] = useState(false);\r\n  const [teamsContext, setTeamsContext] = useState(null);\r\n\r\n  // Initialize Teams SDK\r\n  useEffect(() => {\r\n    const initializeTeams = async () => {\r\n      try {\r\n        await app.initialize();\r\n        \r\n        // Get Teams context\r\n        const context = await app.getContext();\r\n        setTeamsContext(context);\r\n        setTeamsInitialized(true);\r\n        \r\n        // Notify Teams that the app has loaded successfully\r\n        app.notifySuccess();\r\n        \r\n        console.log('Teams context:', context);\r\n      } catch (error) {\r\n        console.error('Failed to initialize Teams SDK:', error);\r\n        // Still allow the app to work outside Teams\r\n        setTeamsInitialized(true);\r\n      }\r\n    };\r\n\r\n    initializeTeams();\r\n  }, []);\r\n\r\n  // Check API status on component mount\r\n  useEffect(() => {\r\n    if (teamsInitialized) {\r\n      checkApiStatus();\r\n    }\r\n  }, [teamsInitialized]);\r\n\r\n  const checkApiStatus = async () => {\r\n    try {\r\n      // In Teams, we might need to use a different API endpoint\r\n      const apiUrl = process.env.REACT_APP_API_URL || '/health';\r\n      const response = await fetch(apiUrl);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setApiStatus('connected');\r\n        setAvailablePdfs(data.available_pdfs || []);\r\n      } else {\r\n        setApiStatus('error');\r\n      }\r\n    } catch (error) {\r\n      console.error('API health check failed:', error);\r\n      setApiStatus('error');\r\n    }\r\n  };\r\n\r\n  // Show loading state while Teams is initializing\r\n  if (!teamsInitialized) {\r\n    return (\r\n      <div className=\"teams-loading\">\r\n        <div className=\"loading-spinner\">Initializing Teams App...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App teams-app\">\r\n      <Header \r\n        apiStatus={apiStatus} \r\n        onRefresh={checkApiStatus}\r\n        teamsContext={teamsContext}\r\n      />\r\n      \r\n      <div className=\"app-container\">\r\n        <StatusPanel \r\n          apiStatus={apiStatus}\r\n          availablePdfs={availablePdfs}\r\n          selectedPdf={selectedPdf}\r\n          ocrMethod={ocrMethod}\r\n          onPdfChange={setSelectedPdf}\r\n          onOcrMethodChange={setOcrMethod}\r\n          onRefresh={checkApiStatus}\r\n        />\r\n        \r\n        <ChatInterface \r\n          selectedPdf={selectedPdf}\r\n          ocrMethod={ocrMethod}\r\n          apiStatus={apiStatus}\r\n          teamsContext={teamsContext}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
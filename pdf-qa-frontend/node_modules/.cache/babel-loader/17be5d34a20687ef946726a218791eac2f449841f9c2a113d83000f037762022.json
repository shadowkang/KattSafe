{"ast":null,"code":"var _jsxFileName = \"D:\\\\KattSafe\\\\pdf-qa-frontend\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Send, Bot, User, Copy, RefreshCw, AlertCircle } from 'lucide-react';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  selectedPdf,\n  ocrMethod,\n  apiStatus\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Sample questions for quick testing\n  const sampleQuestions = [\"What is this manual about?\", \"What are the safety requirements?\", \"How do you operate this equipment?\", \"What are the maintenance procedures?\", \"What are the specifications or technical details?\"];\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(() => {\n    // Add welcome message when component mounts\n    if (messages.length === 0) {\n      setMessages([{\n        id: 1,\n        type: 'bot',\n        content: \"👋 Hello! I'm your PDF Question Answering assistant. I can help you find information from your PDF documents using advanced OCR technology. Ask me anything about the selected PDF!\",\n        timestamp: new Date(),\n        confidence: null,\n        citations: []\n      }]);\n    }\n  }, []);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const sendMessage = async (messageText = inputMessage) => {\n    if (!messageText.trim() || isLoading || apiStatus !== 'connected') return;\n    const userMessage = {\n      id: Date.now(),\n      type: 'user',\n      content: messageText.trim(),\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n    try {\n      const response = await fetch('/ask', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question: messageText.trim(),\n          pdf: selectedPdf,\n          ocr_method: ocrMethod,\n          format: 'json'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const botMessage = {\n        id: Date.now() + 1,\n        type: 'bot',\n        content: data.answer || 'No answer received',\n        timestamp: new Date(),\n        confidence: data.confidence,\n        citations: data.citations || [],\n        language: data.language,\n        pdf: data.pdf,\n        ocrMethod: data.ocr_method\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        type: 'bot',\n        content: `❌ Sorry, I encountered an error: ${error.message}. Please check if the API server is running and try again.`,\n        timestamp: new Date(),\n        confidence: null,\n        citations: [],\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n  const clearChat = () => {\n    setMessages([{\n      id: 1,\n      type: 'bot',\n      content: \"Chat cleared! How can I help you with your PDF documents?\",\n      timestamp: new Date(),\n      confidence: null,\n      citations: []\n    }]);\n  };\n  const copyToClipboard = text => {\n    navigator.clipboard.writeText(text).then(() => {\n      // Could add a toast notification here\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-title\",\n        children: [/*#__PURE__*/_jsxDEV(Bot, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), \"PDF QA Assistant\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-info\",\n        children: [\"PDF: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedPdf\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 16\n        }, this), \" | OCR: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: ocrMethod\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 54\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary btn-sm\",\n        onClick: clearChat,\n        title: \"Clear Chat\",\n        children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), \"Clear\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: message,\n        onCopy: copyToClipboard\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-bubble bot-message loading-message fade-in\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: /*#__PURE__*/_jsxDEV(Bot, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-meta\",\n            children: \"Processing your question...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), apiStatus !== 'connected' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connection-warning\",\n      children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n        size: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this), \"API connection required to send messages\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sample-questions\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sample-questions-title\",\n        children: \"\\uD83D\\uDCA1 Sample Questions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sample-questions-list\",\n        children: sampleQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sample-question-btn\",\n          onClick: () => sendMessage(question),\n          disabled: isLoading || apiStatus !== 'connected',\n          children: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: inputRef,\n          className: \"chat-input\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Ask a question about your PDF document...\",\n          rows: 1,\n          disabled: isLoading || apiStatus !== 'connected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: () => sendMessage(),\n          disabled: !inputMessage.trim() || isLoading || apiStatus !== 'connected',\n          children: /*#__PURE__*/_jsxDEV(Send, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"eZy9nloB2hykH9fRqd4cngIMD7M=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Send","Bot","User","Copy","RefreshCw","AlertCircle","MessageBubble","jsxDEV","_jsxDEV","ChatInterface","selectedPdf","ocrMethod","apiStatus","_s","messages","setMessages","inputMessage","setInputMessage","isLoading","setIsLoading","messagesEndRef","inputRef","sampleQuestions","scrollToBottom","length","id","type","content","timestamp","Date","confidence","citations","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","messageText","trim","userMessage","now","prev","response","fetch","method","headers","body","JSON","stringify","question","pdf","ocr_method","format","ok","Error","status","data","json","botMessage","answer","language","error","console","errorMessage","message","isError","handleKeyPress","e","key","shiftKey","preventDefault","clearChat","copyToClipboard","text","navigator","clipboard","writeText","then","className","children","size","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","map","onCopy","ref","index","disabled","value","onChange","target","onKeyPress","placeholder","rows","_c","$RefreshReg$"],"sources":["D:/KattSafe/pdf-qa-frontend/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { Send, Bot, User, Copy, RefreshCw, AlertCircle } from 'lucide-react';\r\nimport MessageBubble from './MessageBubble';\r\n\r\nconst ChatInterface = ({ selectedPdf, ocrMethod, apiStatus }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  // Sample questions for quick testing\r\n  const sampleQuestions = [\r\n    \"What is this manual about?\",\r\n    \"What are the safety requirements?\",\r\n    \"How do you operate this equipment?\",\r\n    \"What are the maintenance procedures?\",\r\n    \"What are the specifications or technical details?\"\r\n  ];\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Add welcome message when component mounts\r\n    if (messages.length === 0) {\r\n      setMessages([{\r\n        id: 1,\r\n        type: 'bot',\r\n        content: \"👋 Hello! I'm your PDF Question Answering assistant. I can help you find information from your PDF documents using advanced OCR technology. Ask me anything about the selected PDF!\",\r\n        timestamp: new Date(),\r\n        confidence: null,\r\n        citations: []\r\n      }]);\r\n    }\r\n  }, []);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const sendMessage = async (messageText = inputMessage) => {\r\n    if (!messageText.trim() || isLoading || apiStatus !== 'connected') return;\r\n\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      type: 'user',\r\n      content: messageText.trim(),\r\n      timestamp: new Date()\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputMessage('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await fetch('/ask', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          question: messageText.trim(),\r\n          pdf: selectedPdf,\r\n          ocr_method: ocrMethod,\r\n          format: 'json'\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        type: 'bot',\r\n        content: data.answer || 'No answer received',\r\n        timestamp: new Date(),\r\n        confidence: data.confidence,\r\n        citations: data.citations || [],\r\n        language: data.language,\r\n        pdf: data.pdf,\r\n        ocrMethod: data.ocr_method\r\n      };\r\n\r\n      setMessages(prev => [...prev, botMessage]);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      \r\n      const errorMessage = {\r\n        id: Date.now() + 1,\r\n        type: 'bot',\r\n        content: `❌ Sorry, I encountered an error: ${error.message}. Please check if the API server is running and try again.`,\r\n        timestamp: new Date(),\r\n        confidence: null,\r\n        citations: [],\r\n        isError: true\r\n      };\r\n\r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const clearChat = () => {\r\n    setMessages([{\r\n      id: 1,\r\n      type: 'bot',\r\n      content: \"Chat cleared! How can I help you with your PDF documents?\",\r\n      timestamp: new Date(),\r\n      confidence: null,\r\n      citations: []\r\n    }]);\r\n  };\r\n\r\n  const copyToClipboard = (text) => {\r\n    navigator.clipboard.writeText(text).then(() => {\r\n      // Could add a toast notification here\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-interface\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"chat-title\">\r\n          <Bot size={20} />\r\n          PDF QA Assistant\r\n        </div>\r\n        <div className=\"chat-info\">\r\n          PDF: <strong>{selectedPdf}</strong> | OCR: <strong>{ocrMethod}</strong>\r\n        </div>\r\n        <button \r\n          className=\"btn btn-secondary btn-sm\"\r\n          onClick={clearChat}\r\n          title=\"Clear Chat\"\r\n        >\r\n          <RefreshCw size={16} />\r\n          Clear\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"messages-container\">\r\n        {messages.map((message) => (\r\n          <MessageBubble\r\n            key={message.id}\r\n            message={message}\r\n            onCopy={copyToClipboard}\r\n          />\r\n        ))}\r\n        \r\n        {isLoading && (\r\n          <div className=\"message-bubble bot-message loading-message fade-in\">\r\n            <div className=\"message-avatar\">\r\n              <Bot size={16} />\r\n            </div>\r\n            <div className=\"message-content\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n              <div className=\"message-meta\">\r\n                Processing your question...\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      {apiStatus !== 'connected' && (\r\n        <div className=\"connection-warning\">\r\n          <AlertCircle size={16} />\r\n          API connection required to send messages\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"sample-questions\">\r\n        <div className=\"sample-questions-title\">💡 Sample Questions:</div>\r\n        <div className=\"sample-questions-list\">\r\n          {sampleQuestions.map((question, index) => (\r\n            <button\r\n              key={index}\r\n              className=\"sample-question-btn\"\r\n              onClick={() => sendMessage(question)}\r\n              disabled={isLoading || apiStatus !== 'connected'}\r\n            >\r\n              {question}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-input-container\">\r\n        <div className=\"chat-input-wrapper\">\r\n          <textarea\r\n            ref={inputRef}\r\n            className=\"chat-input\"\r\n            value={inputMessage}\r\n            onChange={(e) => setInputMessage(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Ask a question about your PDF document...\"\r\n            rows={1}\r\n            disabled={isLoading || apiStatus !== 'connected'}\r\n          />\r\n          <button\r\n            className=\"send-button\"\r\n            onClick={() => sendMessage()}\r\n            disabled={!inputMessage.trim() || isLoading || apiStatus !== 'connected'}\r\n          >\r\n            <Send size={18} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEC,WAAW,QAAQ,cAAc;AAC5E,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,aAAa,GAAGA,CAAC;EAAEC,WAAW;EAAEC,SAAS;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC/D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMuB,cAAc,GAAGtB,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMuB,QAAQ,GAAGvB,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACA,MAAMwB,eAAe,GAAG,CACtB,4BAA4B,EAC5B,mCAAmC,EACnC,oCAAoC,EACpC,sCAAsC,EACtC,mDAAmD,CACpD;EAEDvB,SAAS,CAAC,MAAM;IACdwB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEdf,SAAS,CAAC,MAAM;IACd;IACA,IAAIe,QAAQ,CAACU,MAAM,KAAK,CAAC,EAAE;MACzBT,WAAW,CAAC,CAAC;QACXU,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE,qLAAqL;QAC9LC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBC,UAAU,EAAE,IAAI;QAChBC,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMR,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAS,qBAAA;IAC3B,CAAAA,qBAAA,GAAAZ,cAAc,CAACa,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC;EAED,MAAMC,WAAW,GAAG,MAAAA,CAAOC,WAAW,GAAGrB,YAAY,KAAK;IACxD,IAAI,CAACqB,WAAW,CAACC,IAAI,CAAC,CAAC,IAAIpB,SAAS,IAAIN,SAAS,KAAK,WAAW,EAAE;IAEnE,MAAM2B,WAAW,GAAG;MAClBd,EAAE,EAAEI,IAAI,CAACW,GAAG,CAAC,CAAC;MACdd,IAAI,EAAE,MAAM;MACZC,OAAO,EAAEU,WAAW,CAACC,IAAI,CAAC,CAAC;MAC3BV,SAAS,EAAE,IAAIC,IAAI,CAAC;IACtB,CAAC;IAEDd,WAAW,CAAC0B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEF,WAAW,CAAC,CAAC;IAC3CtB,eAAe,CAAC,EAAE,CAAC;IACnBE,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF,MAAMuB,QAAQ,GAAG,MAAMC,KAAK,CAAC,MAAM,EAAE;QACnCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAEZ,WAAW,CAACC,IAAI,CAAC,CAAC;UAC5BY,GAAG,EAAExC,WAAW;UAChByC,UAAU,EAAExC,SAAS;UACrByC,MAAM,EAAE;QACV,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBZ,QAAQ,CAACa,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;MAElC,MAAMC,UAAU,GAAG;QACjBjC,EAAE,EAAEI,IAAI,CAACW,GAAG,CAAC,CAAC,GAAG,CAAC;QAClBd,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE6B,IAAI,CAACG,MAAM,IAAI,oBAAoB;QAC5C/B,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBC,UAAU,EAAE0B,IAAI,CAAC1B,UAAU;QAC3BC,SAAS,EAAEyB,IAAI,CAACzB,SAAS,IAAI,EAAE;QAC/B6B,QAAQ,EAAEJ,IAAI,CAACI,QAAQ;QACvBV,GAAG,EAAEM,IAAI,CAACN,GAAG;QACbvC,SAAS,EAAE6C,IAAI,CAACL;MAClB,CAAC;MAEDpC,WAAW,CAAC0B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEiB,UAAU,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAE9C,MAAME,YAAY,GAAG;QACnBtC,EAAE,EAAEI,IAAI,CAACW,GAAG,CAAC,CAAC,GAAG,CAAC;QAClBd,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE,oCAAoCkC,KAAK,CAACG,OAAO,4DAA4D;QACtHpC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBC,UAAU,EAAE,IAAI;QAChBC,SAAS,EAAE,EAAE;QACbkC,OAAO,EAAE;MACX,CAAC;MAEDlD,WAAW,CAAC0B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEsB,YAAY,CAAC,CAAC;IAC9C,CAAC,SAAS;MACR5C,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAM+C,cAAc,GAAIC,CAAC,IAAK;IAC5B,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,IAAI,CAACD,CAAC,CAACE,QAAQ,EAAE;MACpCF,CAAC,CAACG,cAAc,CAAC,CAAC;MAClBlC,WAAW,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMmC,SAAS,GAAGA,CAAA,KAAM;IACtBxD,WAAW,CAAC,CAAC;MACXU,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,KAAK;MACXC,OAAO,EAAE,2DAA2D;MACpEC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrBC,UAAU,EAAE,IAAI;MAChBC,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMyC,eAAe,GAAIC,IAAI,IAAK;IAChCC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC,CAACI,IAAI,CAAC,MAAM;MAC7C;IAAA,CACD,CAAC;EACJ,CAAC;EAED,oBACErE,OAAA;IAAKsE,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BvE,OAAA;MAAKsE,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BvE,OAAA;QAAKsE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBvE,OAAA,CAACP,GAAG;UAAC+E,IAAI,EAAE;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,oBAEnB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN5E,OAAA;QAAKsE,SAAS,EAAC,WAAW;QAAAC,QAAA,GAAC,OACpB,eAAAvE,OAAA;UAAAuE,QAAA,EAASrE;QAAW;UAAAuE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,YAAQ,eAAA5E,OAAA;UAAAuE,QAAA,EAASpE;QAAS;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CAAC,eACN5E,OAAA;QACEsE,SAAS,EAAC,0BAA0B;QACpCO,OAAO,EAAEd,SAAU;QACnBe,KAAK,EAAC,YAAY;QAAAP,QAAA,gBAElBvE,OAAA,CAACJ,SAAS;UAAC4E,IAAI,EAAE;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,SAEzB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAEN5E,OAAA;MAAKsE,SAAS,EAAC,oBAAoB;MAAAC,QAAA,GAChCjE,QAAQ,CAACyE,GAAG,CAAEvB,OAAO,iBACpBxD,OAAA,CAACF,aAAa;QAEZ0D,OAAO,EAAEA,OAAQ;QACjBwB,MAAM,EAAEhB;MAAgB,GAFnBR,OAAO,CAACvC,EAAE;QAAAwD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGhB,CACF,CAAC,EAEDlE,SAAS,iBACRV,OAAA;QAAKsE,SAAS,EAAC,oDAAoD;QAAAC,QAAA,gBACjEvE,OAAA;UAAKsE,SAAS,EAAC,gBAAgB;UAAAC,QAAA,eAC7BvE,OAAA,CAACP,GAAG;YAAC+E,IAAI,EAAE;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,eACN5E,OAAA;UAAKsE,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BvE,OAAA;YAAKsE,SAAS,EAAC,kBAAkB;YAAAC,QAAA,gBAC/BvE,OAAA;cAAAyE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACb5E,OAAA;cAAAyE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACb5E,OAAA;cAAAyE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV,CAAC,eACN5E,OAAA;YAAKsE,SAAS,EAAC,cAAc;YAAAC,QAAA,EAAC;UAE9B;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,eAED5E,OAAA;QAAKiF,GAAG,EAAErE;MAAe;QAAA6D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,EAELxE,SAAS,KAAK,WAAW,iBACxBJ,OAAA;MAAKsE,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBACjCvE,OAAA,CAACH,WAAW;QAAC2E,IAAI,EAAE;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,4CAE3B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACN,eAED5E,OAAA;MAAKsE,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BvE,OAAA;QAAKsE,SAAS,EAAC,wBAAwB;QAAAC,QAAA,EAAC;MAAoB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAClE5E,OAAA;QAAKsE,SAAS,EAAC,uBAAuB;QAAAC,QAAA,EACnCzD,eAAe,CAACiE,GAAG,CAAC,CAACtC,QAAQ,EAAEyC,KAAK,kBACnClF,OAAA;UAEEsE,SAAS,EAAC,qBAAqB;UAC/BO,OAAO,EAAEA,CAAA,KAAMjD,WAAW,CAACa,QAAQ,CAAE;UACrC0C,QAAQ,EAAEzE,SAAS,IAAIN,SAAS,KAAK,WAAY;UAAAmE,QAAA,EAEhD9B;QAAQ,GALJyC,KAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMJ,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN5E,OAAA;MAAKsE,SAAS,EAAC,sBAAsB;MAAAC,QAAA,eACnCvE,OAAA;QAAKsE,SAAS,EAAC,oBAAoB;QAAAC,QAAA,gBACjCvE,OAAA;UACEiF,GAAG,EAAEpE,QAAS;UACdyD,SAAS,EAAC,YAAY;UACtBc,KAAK,EAAE5E,YAAa;UACpB6E,QAAQ,EAAG1B,CAAC,IAAKlD,eAAe,CAACkD,CAAC,CAAC2B,MAAM,CAACF,KAAK,CAAE;UACjDG,UAAU,EAAE7B,cAAe;UAC3B8B,WAAW,EAAC,2CAA2C;UACvDC,IAAI,EAAE,CAAE;UACRN,QAAQ,EAAEzE,SAAS,IAAIN,SAAS,KAAK;QAAY;UAAAqE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CAAC,eACF5E,OAAA;UACEsE,SAAS,EAAC,aAAa;UACvBO,OAAO,EAAEA,CAAA,KAAMjD,WAAW,CAAC,CAAE;UAC7BuD,QAAQ,EAAE,CAAC3E,YAAY,CAACsB,IAAI,CAAC,CAAC,IAAIpB,SAAS,IAAIN,SAAS,KAAK,WAAY;UAAAmE,QAAA,eAEzEvE,OAAA,CAACR,IAAI;YAACgF,IAAI,EAAE;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvE,EAAA,CAhOIJ,aAAa;AAAAyF,EAAA,GAAbzF,aAAa;AAkOnB,eAAeA,aAAa;AAAC,IAAAyF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}